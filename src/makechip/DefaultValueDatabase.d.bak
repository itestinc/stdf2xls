module makechip.DefaultValueDatabase;
import std.stdio;
import makechip.util.Collections;
import makechip.Stdf;
import makechip.Descriptors;

public class DefaultValueDatabase
{
    alias TestNumber_t = uint;
    alias DupNumber_t = uint;
    alias TestName_t = string;
    alias Site_t = ubyte;
    alias Head_t = ubyte;

    MultiMap!(string,   Record_t, TestNumber_t, DupNumber_t) defaultTestNames;
    MultiMap!(ubyte,    Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultOptFlags;
    MultiMap!(byte,     Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultResScals;
    MultiMap!(byte,     Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultLlmScals;
    MultiMap!(byte,     Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultHlmScals;
    MultiMap!(float,    Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultLoLimits;
    MultiMap!(float,    Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultHiLimits;
    MultiMap!(string,   Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultUnits;
    MultiMap!(ushort[], Record_t, TestNumber_t, TestName_t, DupNumber_t) defaultPinIndicies;

    this()
    {
        defaultTestNames   = new MultiMap!(string,   Record_t, TestNumber_t, DupNumber_t)();
        defaultOptFlags    = new MultiMap!(ubyte,    Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultResScals    = new MultiMap!(byte,     Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultLlmScals    = new MultiMap!(byte,     Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultHlmScals    = new MultiMap!(byte,     Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultLoLimits    = new MultiMap!(float,    Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultHiLimits    = new MultiMap!(float,    Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultUnits       = new MultiMap!(string,   Record_t, TestNumber_t, TestName_t, DupNumber_t)();
        defaultPinIndicies = new MultiMap!(ushort[], Record_t, TestNumber_t, TestName_t, DupNumber_t)();
    }

    // Handle cases where there are no test names
    // Handle cases where there are test names, but many duplicate test numbers
    // Handle cases where there are unique test names and numbers
    public void loadDefaults(StdfRecord[] rs)
    {
        auto dupNums  = new MultiMap!(uint, Record_t, TestNumber_t, TestName_t, Site_t, Head_t)();
        foreach(r; rs)
        {
            switch (r.recordType.ordinal)
            {
            case Record_t.FTR.ordinal:
                auto ftr = cast(Record!FTR) r;
                uint dup = dupNums.get(uint.max, r.recordType, ftr.TEST_NUM, ftr.TEST_TXT, ftr.SITE_NUM, ftr.HEAD_NUM);
                if (dup == uint.max) dup = 1; else dup++;
                dupNums.put(dup, r.recordType, ftr.TEST_NUM, ftr.TEST_NAME_t, ftr.SITE_NUM, ftr.HEAD_NUM);
                string s = defaultTestNames.get("", r.recordType, ftr.TEST_NUM, dup);
                if (s == "" && !ftr.TEST_TXT.isEmpty())
                {
                    defaultTestNames.put(ftr.TEST_TXT, r.recordType, ftr.TEST_NUM, dup);
                }
                break;
            case Record_t.PTR.ordinal, Record_t.MPR.ordinal:
                auto ptr = cast(Record!PTR) r;
                uint dup = dupNums.get(uint.max, r.recordType, ptr.TEST_NUM, ptr.TEST_TXT, ftr.SITE_NUM, ftr.HEAD_NUM);
                if (dup == uint.max) dup = 1; else dup++;
                string s = defaultTestNames.get("", r.recordType, ptr.TEST_NUM, dup);
                if (s == "" && !ptr.TEST_TXT.isEmpty())
                {
                    defaultTestNames.put(ptr.TEST_TXT, r.recordType, ptr.TEST_NUM, dup);
                }
                if (!ptr.OPT_FLAG.isEmpty() && defaultOptFlag.get(0, r.recordType, ptr.TEST_NUM, ptr.TEST_TXT, dup) == 0)
                {
                    defaultOptFlag.put(ptr.OPT_FLAG, r.recordType, ptr.TEST_NUM, ptr.TEST_TXT, dup);
                }

                break;
            case Record_t.PRR.ordinal:
                dupNums = new MultiMap!(uint, Record_t, TestNumber_t, Site_t, Head_t)();
                break;
            default:
            }
        }
        
    }


}
